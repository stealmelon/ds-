//
//  main.c
//  List(1)
//
//  Created by s20181106115 on 2019/11/19.
//  Copyright © 2019 imnu. All rights reserved.
//

#include <stdio.h>
#include <stdlib.h>
#include "stdbool.h"
#define MAXSIZE 6

typedef int ElemType;

struct Lnode{
    ElemType data[MAXSIZE];
    int last;
};
typedef struct Lnode * List;

List MakeEmpty()//初始化顺序表
{
    List L;
    L = (List)malloc(sizeof(struct Lnode));
    L->last = -1;
    for(int i = 0; i < MAXSIZE; i++)
    {
        scanf("%d", &L->data[i]);
        L->last++;
    }
    return L;
}

int Find(List L, ElemType X)//查找
{
    int i = 0;
    while(i <= L->last && L->data[i] != X)
        i++;
    if(i > L->last) return -1;
    else return i + 1;//返回位序非下标
}

bool Insert(List L, ElemType X, int i)//插入 i 为位序对应下标 i - 1
{
    if(i < 1 || i > L->last + 2)
    {
        printf("位序不合法！\n");
        return false;
    }
    if(L->last == MAXSIZE - 1)
    {
        printf("表满！\n");
        return false;
    }
    for(int j = L->last; j >= i - 1; j--)
        L->data[j + 1] = L->data[j];//元素后移
    L->data[i - 1] = X;
    L->last++;
    return true;
}

bool Delete(List L, int i)//删除
{
    if(i < 1 || i > L->last + 1)
    {
        printf("位序 %d 不存在元素！\n", i);
        return false;
    }
    for(int j = i; j <= L->last; j++)
        L->data[j - 1] = L->data[j];//元素前移
    L->last--;
    return true;
}

int main(int argc, const char * argv[]) {
    List L = MakeEmpty();
    int a = 0;
    for (int i = 0; i < MAXSIZE; i++)
    {
        printf("%d ", L->data[i]);
    }
    printf("\n");
    printf("此时表长为 %d \n", L->last + 1);
    a = Find(L, 2);
    printf("该元素在第 %d 位\n", a);
    Delete(L, 4);
    printf("此时表长为 %d \n", L->last + 1);
    Insert(L, 20, 3);
    for (int i = 0; i < MAXSIZE; i++)
    {
        printf("%d ", L->data[i]);
    }
    printf("\n");
    printf("此时表长为 %d \n", L->last + 1);
    return 0;
}
